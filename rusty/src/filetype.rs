pub struct FileType {
    name: String,
    hl_opts: HighlightingOptions,
}

#[derive(Default)]
pub struct HighlightingOptions {
    numbers: bool,
    strings: bool,
    characters: bool,
    comments: bool,
    multiline_comments: bool,
    primary_keywords: Vec<String>,
    secondary_keywords: Vec<String>,
}

impl Default for FileType {
    fn default() -> Self {
        Self {
            name: String::from("Filetype not detected!"),
            hl_opts: HighlightingOptions::default(),
        }
    }
}

impl FileType {
    pub fn name(&self) -> String {
        self.name.clone()
    }
    pub fn highlighting_options(&self) -> &HighlightingOptions {
        &self.hl_opts
    }
    pub fn from(file_name: &str) -> Self {
        if file_name.ends_with(".rs") {
            return Self {
                name: String::from("Rust"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    primary_keywords: vec![
                        "as".to_string(),
                        "break".to_string(),
                        "const".to_string(),
                        "continue".to_string(),
                        "crate".to_string(),
                        "else".to_string(),
                        "enum".to_string(),
                        "extern".to_string(),
                        "false".to_string(),
                        "fn".to_string(),
                        "for".to_string(),
                        "if".to_string(),
                        "impl".to_string(),
                        "in".to_string(),
                        "let".to_string(),
                        "loop".to_string(),
                        "match".to_string(),
                        "mod".to_string(),
                        "move".to_string(),
                        "mut".to_string(),
                        "pub".to_string(),
                        "ref".to_string(),
                        "return".to_string(),
                        "self".to_string(),
                        "Self".to_string(),
                        "static".to_string(),
                        "struct".to_string(),
                        "super".to_string(),
                        "trait".to_string(),
                        "true".to_string(),
                        "type".to_string(),
                        "unsafe".to_string(),
                        "use".to_string(),
                        "where".to_string(),
                        "while".to_string(),
                        "dyn".to_string(),
                        "abstract".to_string(),
                        "become".to_string(),
                        "box".to_string(),
                        "do".to_string(),
                        "final".to_string(),
                        "macro".to_string(),
                        "override".to_string(),
                        "priv".to_string(),
                        "typeof".to_string(),
                        "unsized".to_string(),
                        "virtual".to_string(),
                        "yield".to_string(),
                        "async".to_string(),
                        "await".to_string(),
                        "try".to_string(),
                    ],
                    secondary_keywords: vec![
                        "bool".to_string(),
                        "char".to_string(),
                        "i8".to_string(),
                        "i16".to_string(),
                        "i32".to_string(),
                        "i64".to_string(),
                        "isize".to_string(),
                        "u8".to_string(),
                        "u16".to_string(),
                        "u32".to_string(),
                        "u64".to_string(),
                        "usize".to_string(),
                        "f32".to_string(),
                        "f64".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".js") {
            return Self {
                name: String::from("JavaScript"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![
                        "if".to_string(),
                        "else".to_string(),
                        "for".to_string(),
                        "while".to_string(),
                        "do".to_string(),
                        "switch".to_string(),
                        "case".to_string(),
                        "break".to_string(),
                        "continue".to_string(),
                        "return".to_string(),
                        "function".to_string(),
                        "var".to_string(),
                        "let".to_string(),
                        "const".to_string(),
                        "try".to_string(),
                        "catch".to_string(),
                        "finally".to_string(),
                        "throw".to_string(),
                        "class".to_string(),
                        "extends".to_string(),
                        "super".to_string(),
                        "import".to_string(),
                        "export".to_string(),
                        "default".to_string(),
                        "async".to_string(),
                        "await".to_string(),
                        "instanceof".to_string(),
                        "typeof".to_string(),
                        "delete".to_string(),
                        "in".to_string(),
                        "with".to_string(),
                        "new".to_string(),
                        "this".to_string(),
                        "true".to_string(),
                        "false".to_string(),
                        "Infinity".to_string(),
                        "void".to_string(),
                        "debugger".to_string(),
                        "arguments".to_string(),
                    ],
                    secondary_keywords: vec![
                        "boolean".to_string(),
                        "Number".to_string(),
                        "NaN".to_string(),
                        "String".to_string(),
                        "undefined".to_string(),
                        "null".to_string(),
                        "Object".to_string(),
                        "Symbol".to_string(),
                        "BigInt".to_string(),
                        "Array".to_string(),
                        "Function".to_string(),
                        "Map".to_string(),
                        "Set".to_string(),
                        "Promise".to_string(),
                        "RegExp".to_string(),
                        "Error".to_string(),
                        "Date".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".ts") {
            return Self {
                name: String::from("TypeScript"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![
                        "if".to_string(),
                        "else".to_string(),
                        "for".to_string(),
                        "while".to_string(),
                        "do".to_string(),
                        "switch".to_string(),
                        "case".to_string(),
                        "break".to_string(),
                        "continue".to_string(),
                        "return".to_string(),
                        "function".to_string(),
                        "var".to_string(),
                        "let".to_string(),
                        "const".to_string(),
                        "try".to_string(),
                        "catch".to_string(),
                        "finally".to_string(),
                        "throw".to_string(),
                        "class".to_string(),
                        "extends".to_string(),
                        "super".to_string(),
                        "import".to_string(),
                        "export".to_string(),
                        "default".to_string(),
                        "async".to_string(),
                        "await".to_string(),
                        "instanceof".to_string(),
                        "typeof".to_string(),
                        "interface".to_string(),
                        "type".to_string(),
                        "enum".to_string(),
                        "implements".to_string(),
                        "namespace".to_string(),
                        "declare".to_string(),
                        "module".to_string(),
                        "readonly".to_string(),
                        "constructor".to_string(),
                        "get".to_string(),
                        "set".to_string(),
                        "readonly".to_string(),
                        "abstract".to_string(),
                        "as".to_string(),
                        "is".to_string(),
                        "keyof".to_string(),
                        "readonly".to_string(),
                        "delete".to_string(),
                        "in".to_string(),
                        "with".to_string(),
                        "new".to_string(),
                        "this".to_string(),
                        "true".to_string(),
                        "false".to_string(),
                        "null".to_string(),
                        "undefined".to_string(),
                        "NaN".to_string(),
                        "Infinity".to_string(),
                        "void".to_string(),
                        "debugger".to_string(),
                        "arguments".to_string(),
                    ],
                    secondary_keywords: vec![
                        "boolean".to_string(),
                        "Number".to_string(),
                        "NaN".to_string(),
                        "String".to_string(),
                        "undefined".to_string(),
                        "null".to_string(),
                        "Object".to_string(),
                        "Symbol".to_string(),
                        "BigInt".to_string(),
                        "Array".to_string(),
                        "Function".to_string(),
                        "Map".to_string(),
                        "Set".to_string(),
                        "Promise".to_string(),
                        "RegExp".to_string(),
                        "Error".to_string(),
                        "Date".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".html") {
            return Self {
                name: String::from("HTML"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![
                        "html".to_string(),
                        "DOCTYPE".to_string(),
                        "html".to_string(),
                        "head".to_string(),
                        "body".to_string(),
                        "div".to_string(),
                        "span".to_string(),
                        "p".to_string(),
                        "a".to_string(),
                        "img".to_string(),
                        "link".to_string(),
                        "script".to_string(),
                        "style".to_string(),
                        "h1".to_string(),
                        "h2".to_string(),
                        "h3".to_string(),
                        "h4".to_string(),
                        "h5".to_string(),
                        "h6".to_string(),
                        "ul".to_string(),
                        "ol".to_string(),
                        "li".to_string(),
                        "table".to_string(),
                        "tr".to_string(),
                        "th".to_string(),
                        "td".to_string(),
                        "form".to_string(),
                        "input".to_string(),
                        "select".to_string(),
                        "option".to_string(),
                        "button".to_string(),
                        "label".to_string(),
                        "textarea".to_string(),
                    ],
                    secondary_keywords: vec![
                        "src".to_string(),
                        "class".to_string(),
                        "id".to_string(),
                        "style".to_string(),
                        "src".to_string(),
                        "href".to_string(),
                        "alt".to_string(),
                        "width".to_string(),
                        "height".to_string(),
                        "type".to_string(),
                        "value".to_string(),
                        "placeholder".to_string(),
                        "checked".to_string(),
                        "disabled".to_string(),
                        "readonly".to_string(),
                        "selected".to_string(),
                        "colspan".to_string(),
                        "rowspan".to_string(),
                        "for".to_string(),
                        "name".to_string(),
                        "action".to_string(),
                        "method".to_string(),
                        "enctype".to_string(),
                        "autocomplete".to_string(),
                        "target".to_string(),
                        "rel".to_string(),
                        "media".to_string(),
                        "charset".to_string(),
                        "http-equiv".to_string(),
                        "content".to_string(),
                        "placeholder".to_string(),
                        "rows".to_string(),
                        "cols".to_string(),
                        // JS keywords in case of using <script>
                        "if".to_string(),
                        "else".to_string(),
                        "for".to_string(),
                        "while".to_string(),
                        "do".to_string(),
                        "switch".to_string(),
                        "case".to_string(),
                        "break".to_string(),
                        "continue".to_string(),
                        "return".to_string(),
                        "function".to_string(),
                        "var".to_string(),
                        "let".to_string(),
                        "const".to_string(),
                        "try".to_string(),
                        "catch".to_string(),
                        "finally".to_string(),
                        "throw".to_string(),
                        "class".to_string(),
                        "extends".to_string(),
                        "super".to_string(),
                        "import".to_string(),
                        "export".to_string(),
                        "default".to_string(),
                        "async".to_string(),
                        "await".to_string(),
                        "instanceof".to_string(),
                        "typeof".to_string(),
                        "delete".to_string(),
                        "in".to_string(),
                        "with".to_string(),
                        "new".to_string(),
                        "this".to_string(),
                        "true".to_string(),
                        "false".to_string(),
                        "Infinity".to_string(),
                        "void".to_string(),
                        "debugger".to_string(),
                        "arguments".to_string(),
                        "boolean".to_string(),
                        "Number".to_string(),
                        "NaN".to_string(),
                        "String".to_string(),
                        "undefined".to_string(),
                        "null".to_string(),
                        "Object".to_string(),
                        "Symbol".to_string(),
                        "BigInt".to_string(),
                        "Array".to_string(),
                        "Function".to_string(),
                        "Map".to_string(),
                        "Set".to_string(),
                        "Promise".to_string(),
                        "RegExp".to_string(),
                        "Error".to_string(),
                        "Date".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".css") {
            return Self {
                name: String::from("CSS"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![
                        "@charset".to_string(),
                        "@import".to_string(),
                        "@media".to_string(),
                        "@font-face".to_string(),
                        "@keyframes".to_string(),
                        ":root".to_string(),
                        ":link".to_string(),
                        ":visited".to_string(),
                        ":hover".to_string(),
                        ":active".to_string(),
                        ":focus".to_string(),
                        ":before".to_string(),
                        ":after".to_string(),
                        "::selection".to_string(),
                        "::before".to_string(),
                        "::after".to_string(),
                        "@media".to_string(),
                        "body".to_string(),
                        "div".to_string(),
                        "span".to_string(),
                        "h1".to_string(),
                        "h2".to_string(),
                        "h3".to_string(),
                        "h4".to_string(),
                        "h5".to_string(),
                        "h6".to_string(),
                        "p".to_string(),
                        "a".to_string(),
                        "img".to_string(),
                        "ul".to_string(),
                        "ol".to_string(),
                        "li".to_string(),
                        "table".to_string(),
                        "tr".to_string(),
                        "th".to_string(),
                        "td".to_string(),
                        "form".to_string(),
                        "input".to_string(),
                        "select".to_string(),
                        "option".to_string(),
                        "button".to_string(),
                        "label".to_string(),
                        "textarea".to_string(),
                    ],
                    secondary_keywords: vec![
                        "color".to_string(),
                        "font-family".to_string(),
                        "font-size".to_string(),
                        "font-weight".to_string(),
                        "text-align".to_string(),
                        "text-decoration".to_string(),
                        "margin".to_string(),
                        "padding".to_string(),
                        "border".to_string(),
                        "background".to_string(),
                        "display".to_string(),
                        "position".to_string(),
                        "width".to_string(),
                        "height".to_string(),
                        "float".to_string(),
                        "clear".to_string(),
                        "cursor".to_string(),
                        "visibility".to_string(),
                        "opacity".to_string(),
                        "z-index".to_string(),
                        "overflow".to_string(),
                        "white-space".to_string(),
                        "box-sizing".to_string(),
                        "transition".to_string(),
                        "animation".to_string(),
                        "transform".to_string(),
                        "box-shadow".to_string(),
                        "text-shadow".to_string(),
                        "border-radius".to_string(),
                        "outline".to_string(),
                        "user-select".to_string(),
                        "list-style".to_string(),
                        "flex".to_string(),
                        "grid".to_string(),
                        "justify-content".to_string(),
                        "align-items".to_string(),
                        "align-self".to_string(),
                        "flex-grow".to_string(),
                        "flex-shrink".to_string(),
                        "flex-basis".to_string(),
                        "order".to_string(),
                        "grid-template-columns".to_string(),
                        "grid-template-rows".to_string(),
                        "grid-column".to_string(),
                        "grid-row".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".cpp") || file_name.ends_with(".h") {
            return Self {
                name: String::from("C++"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![
                        "#include".to_string(),
                        "#define".to_string(),
                        "using".to_string(),
                        "namespace".to_string(),
                        "class".to_string(),
                        "struct".to_string(),
                        "enum".to_string(),
                        "template".to_string(),
                        "typename".to_string(),
                        "typedef".to_string(),
                        "const".to_string(),
                        "volatile".to_string(),
                        "static".to_string(),
                        "extern".to_string(),
                        "inline".to_string(),
                        "virtual".to_string(),
                        "override".to_string(),
                        "final".to_string(),
                        "public".to_string(),
                        "private".to_string(),
                        "protected".to_string(),
                        "friend".to_string(),
                        "if".to_string(),
                        "else".to_string(),
                        "switch".to_string(),
                        "case".to_string(),
                        "default".to_string(),
                        "while".to_string(),
                        "do".to_string(),
                        "for".to_string(),
                        "break".to_string(),
                        "continue".to_string(),
                        "return".to_string(),
                        "try".to_string(),
                        "catch".to_string(),
                        "throw".to_string(),
                        "true".to_string(),
                        "false".to_string(),
                        "nullptr".to_string(),
                        "sizeof".to_string(),
                        "new".to_string(),
                        "delete".to_string(),
                    ],
                    secondary_keywords: vec![
                        "int".to_string(),
                        "char".to_string(),
                        "float".to_string(),
                        "double".to_string(),
                        "bool".to_string(),
                        "void".to_string(),
                        "long".to_string(),
                        "short".to_string(),
                        "unsigned".to_string(),
                        "signed".to_string(),
                        "wchar_t".to_string(),
                        "std".to_string(),
                        "string".to_string(),
                        "vector".to_string(),
                        "array".to_string(),
                        "list".to_string(),
                        "map".to_string(),
                        "set".to_string(),
                        "queue".to_string(),
                        "stack".to_string(),
                        "pair".to_string(),
                        "tuple".to_string(),
                        "iterator".to_string(),
                        "cin".to_string(),
                        "cout".to_string(),
                        "endl".to_string(),
                        "assert".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".sh") {
            return Self {
                name: String::from("Bash"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![
                        "if".to_string(),
                        "then".to_string(),
                        "else".to_string(),
                        "elif".to_string(),
                        "fi".to_string(),
                        "case".to_string(),
                        "esac".to_string(),
                        "while".to_string(),
                        "for".to_string(),
                        "in".to_string(),
                        "do".to_string(),
                        "done".to_string(),
                        "until".to_string(),
                        "function".to_string(),
                        "return".to_string(),
                        "break".to_string(),
                        "continue".to_string(),
                    ],
                    secondary_keywords: vec![
                        "alias".to_string(),
                        "bg".to_string(),
                        "bind".to_string(),
                        "break".to_string(),
                        "builtin".to_string(),
                        "caller".to_string(),
                        "cd".to_string(),
                        "command".to_string(),
                        "compgen".to_string(),
                        "complete".to_string(),
                        "continue".to_string(),
                        "declare".to_string(),
                        "dirs".to_string(),
                        "disown".to_string(),
                        "echo".to_string(),
                        "enable".to_string(),
                        "eval".to_string(),
                        "exec".to_string(),
                        "exit".to_string(),
                        "export".to_string(),
                        "false".to_string(),
                        "fc".to_string(),
                        "fg".to_string(),
                        "getopts".to_string(),
                        "hash".to_string(),
                        "help".to_string(),
                        "history".to_string(),
                        "jobs".to_string(),
                        "kill".to_string(),
                        "let".to_string(),
                        "local".to_string(),
                        "logout".to_string(),
                        "mapfile".to_string(),
                        "popd".to_string(),
                        "printf".to_string(),
                        "pushd".to_string(),
                        "pwd".to_string(),
                        "read".to_string(),
                        "readonly".to_string(),
                        "return".to_string(),
                        "set".to_string(),
                        "shift".to_string(),
                        "shopt".to_string(),
                        "source".to_string(),
                        "suspend".to_string(),
                        "test".to_string(),
                        "time".to_string(),
                        "times".to_string(),
                        "trap".to_string(),
                        "true".to_string(),
                        "type".to_string(),
                        "typeset".to_string(),
                        "ulimit".to_string(),
                        "umask".to_string(),
                        "unalias".to_string(),
                        "unset".to_string(),
                        "wait".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".java") {
            return Self {
                name: String::from("Java"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![
                        "abstract".to_string(),
                        "assert".to_string(),
                        "boolean".to_string(),
                        "break".to_string(),
                        "byte".to_string(),
                        "case".to_string(),
                        "catch".to_string(),
                        "char".to_string(),
                        "class".to_string(),
                        "const".to_string(),
                        "continue".to_string(),
                        "default".to_string(),
                        "do".to_string(),
                        "double".to_string(),
                        "else".to_string(),
                        "enum".to_string(),
                        "extends".to_string(),
                        "final".to_string(),
                        "finally".to_string(),
                        "float".to_string(),
                        "for".to_string(),
                        "if".to_string(),
                        "implements".to_string(),
                        "import".to_string(),
                        "instanceof".to_string(),
                        "int".to_string(),
                        "interface".to_string(),
                        "long".to_string(),
                        "native".to_string(),
                        "new".to_string(),
                        "package".to_string(),
                        "private".to_string(),
                        "protected".to_string(),
                        "public".to_string(),
                        "return".to_string(),
                        "short".to_string(),
                        "static".to_string(),
                        "strictfp".to_string(),
                        "super".to_string(),
                        "switch".to_string(),
                        "synchronized".to_string(),
                        "System".to_string(),
                        "this".to_string(),
                        "throw".to_string(),
                        "throws".to_string(),
                        "transient".to_string(),
                        "try".to_string(),
                        "void".to_string(),
                        "volatile".to_string(),
                        "while".to_string(),
                    ],
                    secondary_keywords: vec![
                        "boolean".to_string(),
                        "byte".to_string(),
                        "char".to_string(),
                        "double".to_string(),
                        "float".to_string(),
                        "int".to_string(),
                        "long".to_string(),
                        "short".to_string(),
                        "true".to_string(),
                        "false".to_string(),
                        "null".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".cs") {
            return Self {
                name: String::from("C#"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![
                        "abstract".to_string(),
                        "as".to_string(),
                        "base".to_string(),
                        "bool".to_string(),
                        "break".to_string(),
                        "byte".to_string(),
                        "case".to_string(),
                        "catch".to_string(),
                        "char".to_string(),
                        "checked".to_string(),
                        "class".to_string(),
                        "const".to_string(),
                        "continue".to_string(),
                        "decimal".to_string(),
                        "default".to_string(),
                        "delegate".to_string(),
                        "do".to_string(),
                        "double".to_string(),
                        "else".to_string(),
                        "enum".to_string(),
                        "event".to_string(),
                        "explicit".to_string(),
                        "extern".to_string(),
                        "false".to_string(),
                        "finally".to_string(),
                        "fixed".to_string(),
                        "float".to_string(),
                        "for".to_string(),
                        "foreach".to_string(),
                        "goto".to_string(),
                        "if".to_string(),
                        "implicit".to_string(),
                        "in".to_string(),
                        "int".to_string(),
                        "interface".to_string(),
                        "internal".to_string(),
                        "is".to_string(),
                        "lock".to_string(),
                        "long".to_string(),
                        "namespace".to_string(),
                        "new".to_string(),
                        "null".to_string(),
                        "object".to_string(),
                        "operator".to_string(),
                        "out".to_string(),
                        "override".to_string(),
                        "params".to_string(),
                        "private".to_string(),
                        "protected".to_string(),
                        "public".to_string(),
                        "readonly".to_string(),
                        "ref".to_string(),
                        "return".to_string(),
                        "sbyte".to_string(),
                        "sealed".to_string(),
                        "short".to_string(),
                        "sizeof".to_string(),
                        "stackalloc".to_string(),
                        "static".to_string(),
                        "string".to_string(),
                        "struct".to_string(),
                        "switch".to_string(),
                        "this".to_string(),
                        "throw".to_string(),
                        "true".to_string(),
                        "try".to_string(),
                        "typeof".to_string(),
                        "uint".to_string(),
                        "ulong".to_string(),
                        "unchecked".to_string(),
                        "unsafe".to_string(),
                        "ushort".to_string(),
                        "using".to_string(),
                        "virtual".to_string(),
                        "void".to_string(),
                        "volatile".to_string(),
                        "while".to_string(),
                    ],
                    secondary_keywords: vec![
                        "add".to_string(),
                        "alias".to_string(),
                        "ascending".to_string(),
                        "async".to_string(),
                        "await".to_string(),
                        "descending".to_string(),
                        "dynamic".to_string(),
                        "from".to_string(),
                        "get".to_string(),
                        "global".to_string(),
                        "group".to_string(),
                        "into".to_string(),
                        "join".to_string(),
                        "let".to_string(),
                        "orderby".to_string(),
                        "partial".to_string(),
                        "remove".to_string(),
                        "select".to_string(),
                        "set".to_string(),
                        "value".to_string(),
                        "var".to_string(),
                        "where".to_string(),
                        "yield".to_string(),
                        "bool".to_string(),
                        "byte".to_string(),
                        "char".to_string(),
                        "decimal".to_string(),
                        "double".to_string(),
                        "float".to_string(),
                        "int".to_string(),
                        "long".to_string(),
                        "object".to_string(),
                        "sbyte".to_string(),
                        "short".to_string(),
                        "string".to_string(),
                        "uint".to_string(),
                        "ulong".to_string(),
                        "ushort".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".py") {
            return Self {
                name: String::from("Python"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![
                        "False".to_string(),
                        "None".to_string(),
                        "True".to_string(),
                        "and".to_string(),
                        "as".to_string(),
                        "assert".to_string(),
                        "async".to_string(),
                        "await".to_string(),
                        "break".to_string(),
                        "class".to_string(),
                        "continue".to_string(),
                        "def".to_string(),
                        "del".to_string(),
                        "elif".to_string(),
                        "else".to_string(),
                        "except".to_string(),
                        "finally".to_string(),
                        "for".to_string(),
                        "from".to_string(),
                        "global".to_string(),
                        "if".to_string(),
                        "import".to_string(),
                        "in".to_string(),
                        "is".to_string(),
                        "lambda".to_string(),
                        "nonlocal".to_string(),
                        "not".to_string(),
                        "or".to_string(),
                        "pass".to_string(),
                        "raise".to_string(),
                        "return".to_string(),
                        "try".to_string(),
                        "while".to_string(),
                        "with".to_string(),
                        "yield".to_string(),
                    ],
                    secondary_keywords: vec![
                        "bool".to_string(),
                        "bytearray".to_string(),
                        "bytes".to_string(),
                        "complex".to_string(),
                        "dict".to_string(),
                        "float".to_string(),
                        "frozenset".to_string(),
                        "int".to_string(),
                        "list".to_string(),
                        "object".to_string(),
                        "set".to_string(),
                        "str".to_string(),
                        "tuple".to_string(),
                    ],
                },
            };
        }
        Self::default()

        /* This is how we add more languages - Remove this comment when I wont add more languages
        file_name.ends_with("file extensions here") {
            return Self {
                name: String::from("Language"),
                hl_opts: HighlightingOptions {
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    numbers: true,
                    strings: true,
                    primary_keywords: vec![],
                    secondary_keywords: vec![],
            }
        }*/
    }
}

impl HighlightingOptions {
    pub fn numbers(&self) -> bool {
        self.numbers
    }

    pub fn strings(&self) -> bool {
        self.strings
    }

    pub fn characters(&self) -> bool {
        self.characters
    }

    pub fn comments(&self) -> bool {
        self.comments
    }

    pub fn primary_keywords(&self) -> &Vec<String> {
        &self.primary_keywords
    }

    pub fn secondary_keywords(&self) -> &Vec<String> {
        &self.secondary_keywords
    }

    pub fn multiline_comments(&self) -> bool {
        self.multiline_comments
    }
}
